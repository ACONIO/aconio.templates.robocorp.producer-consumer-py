Metadata-Version: 2.1
Name: aconio
Version: 0.5.4
Summary: Create üêç automations in no time with Robocorp & Aconio!
Author-email: Patrick Krukenfellner <patrick.krukenfellner@aconio.net>, Matthias Reumann <matthias.reumann@tum.de>
Project-URL: Homepage, https://github.com/ACONIO/aconio
Keywords: python,automation,rpa
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: robocorp >=2.0.0
Requires-Dist: robocorp-windows >=1.0.3
Requires-Dist: jinja2 >=3.1.3
Requires-Dist: mss >=6.1.0
Requires-Dist: numpy >=1.26.0
Requires-Dist: opencv-python >=4.6.0
Requires-Dist: pynput >=1.7.6
Requires-Dist: pymssql >=2.2.5
Requires-Dist: azure-storage-file-share >=12.15.0
Requires-Dist: rpaframework >=28.5.1
Requires-Dist: requests >=2.32.2
Requires-Dist: pydantic >=2.7.0

# Elevate your üêç Python Automations with the `aconio` Automation Framework üõ†Ô∏è

This framework serves as a foundation for implementing RPA automations covering business processes built around different tax-applications (BMD, RZL, DATEV, ...) and other applications which are highly involved in tax-processes (FinanzOnline, Unternehmensservice-Portal, ...).

It does that by closing the gap between the general RPA functionality available through [Robocorp](https://github.com/robocorp/robocorp/tree/master) and the various different interfaces of the above mentioned applications utilizing UI automation, Desktop API's, REST API's, Databases.

> In a nutshell, the `aconio` framework offers a standardized interface for interacting with widespread tax-applications through a single point of contact.

## Usage
Including the **aconio** library in a robot project as a dependency has some caveats. Because we do not want to make the library publicly accessible via PyPI, there is no option to include the dependency in the `conda.yaml` file of the robot project.

While there's the option for "code sharing" via [Git Subtree](https://www.atlassian.com/git/tutorials/git-subtree) recommended by Robocorp, we decided to avoid this approach since it can alter the commit history in various ways and also allows developers of the main project (in that case the robot repository) to directly push changes to the subtree repository (in this case the **aconio** library), which is something we want to avoid because it interferes with the versioning and workflow of the **aconio** library.

Because of that, when including the **aconio** library in your project, we recommend installing it via a `pip install` into the `libs` directory of the robot:

```bash
pip install git+https://$GITHUB_TOKEN@github.com/ACONIO/aconio.git@v0.0.1-alpha --no-deps --target libs/
```

As you can see, a `GITHUB_TOKEN` must be provided so `pip install` can pull from a private Github repository. You can choose the library version you want to pull simply by specifying the git tag (in this case `v0.0.1-alpha`).

Before installing the dependency, it is recommended to first perform a dry run and omit the `--no-deps` option. By doing this, **pip** will try to install all dependencies of the **aconio** library rather than only the library itself, and then throw an error if dependency requirements of the **aconio** library differ from the dependencies in your robot project (for example aconio uses a different robocorp-browser version than your project):

```bash
pip install --dry-run git+https://$GITHUB_TOKEN@github.com/ACONIO/aconio.git@v0.0.1-alpha --target libs/
```

The `--dry-run` option will prevent **pip** from actually installing the libraries in the `libs` folder, so you can first perform the dry run and check if the dependencies of the library match the ones of your project, and then continue to install the **aconio** library.

> **Note:** Once the `pip install` is done, you need to add the `libs` folder to your `PYTHONPATH` in `robot.yaml` in order for VSCode to recognize the newly installed modules.

### Updating
To update the aconio library, simply delete it from the `libs` folder and run the above commands again with the desired git tag specified.

### Install Script
Use `scripts/install.py` to quickly perform all of the above steps in your project.

## Contributing
Please adhere to the following guidelines when contributing to the project.

### Install Dependencies
Initialize a Python virtual environment and install all dependencies defined in `pyproject.toml`:
```console
$ python -m venv venv/
$ source venv/bin/activate # on Windows: venv/Scripts/activate
$ pip install --require-virtualenv .
```

### Style 
When contributing to the project, please adhere to the [Google Python Style Guide](https://google.github.io/styleguide/pyguide.html).

Also, make sure to use the following settings in your `.vscode/settings.json` file:

```json
{
    "[python]": {
        "editor.defaultFormatter": "ms-python.black-formatter"
    },
    "black-formatter.args": [
        "--line-length",
        "80"
    ],
    "pylint.args": [
        "--rcfile=${workspaceFolder}/pylintrc"
    ]
}
```

### Testing
For testing the individual `aconio` modules, we use Robocorp's `tasks` library, which provides a neat interface for testing.

Use the following command to run the test cases of a specific module:

```bash
# Replace <module> with the module you want to test
python -m robocorp.tasks run tests/<module>/tests.py
```

To only run a specific task within a `tests.py` file, specify the task with the `-t` parameter:
```bash
python -m robocorp.tasks run tests/outlook/tests.py -t test_send_email
```
